'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const diff = require('jest-diff').default;

const snapshot = require('jest-snapshot');

const reactSerializer = require('./react-serializer');

const defaultOptions = {
  expand: false,
  colors: false,
  contextLines: -1,
  // Forces to use default from Jest
  stablePatchmarks: false,
  aAnnotation: 'First value',
  bAnnotation: 'Second value'
};
const SNAPSHOT_TITLE = 'Snapshot Diff:\n';

const identity = value => value;

const defaultSerializers = [reactSerializer];
let serializers = defaultSerializers;

const snapshotDiff = (valueA, valueB, options) => {
  let difference;

  const mergedOptions = _objectSpread({}, defaultOptions, {}, options);

  const matchingSerializer = serializers.find(({
    test
  }) => test(valueA) && test(valueB));

  if (matchingSerializer) {
    const print = matchingSerializer.print,
          diffOptions = matchingSerializer.diffOptions;
    const serializerOptions = diffOptions ? diffOptions(valueA, valueB) || undefined : undefined;
    difference = diffStrings(print(valueA, identity), print(valueB, identity), _objectSpread({}, mergedOptions, {}, serializerOptions));
  } else {
    difference = diffStrings(valueA, valueB, mergedOptions);
  }

  if (!mergedOptions.colors) {
    const stripAnsi = require('strip-ansi');

    difference = stripAnsi(difference);
  }

  if (mergedOptions.stablePatchmarks && !mergedOptions.expand) {
    difference = difference.replace(/^@@ -[0-9]+,[0-9]+ \+[0-9]+,[0-9]+ @@$/gm, '@@ --- --- @@');
  }

  return SNAPSHOT_TITLE + difference;
};

function diffStrings(valueA, valueB, options) {
  return diff(valueA, valueB, {
    expand: options.expand,
    contextLines: options.contextLines,
    aAnnotation: options.aAnnotation,
    bAnnotation: options.bAnnotation
  });
}

function toMatchDiffSnapshot(valueA, valueB, options, testName) {
  const difference = snapshotDiff(valueA, valueB, options);
  return snapshot.toMatchSnapshot.call(this, difference, testName || '');
}

function getSnapshotDiffSerializer() {
  return {
    test(value) {
      return typeof value === 'string' && value.indexOf(SNAPSHOT_TITLE) === 0;
    },

    print(value) {
      return value;
    }

  };
}

function setSerializers(customSerializers) {
  serializers = customSerializers;
}

module.exports = snapshotDiff;
module.exports.snapshotDiff = snapshotDiff;
module.exports.toMatchDiffSnapshot = toMatchDiffSnapshot;
module.exports.getSnapshotDiffSerializer = getSnapshotDiffSerializer;
module.exports.setSerializers = setSerializers;
module.exports.defaultSerializers = defaultSerializers;